---
###################################################################################################################################
- name: NDFW-4X-000004 - The NSX Distributed Firewall must generate traffic log entries.
  tags: [NDFW-4X-000004, NDFW-4X-000007, NDFW-4X-000008]
  when: run_dfw_enable_rule_logging | bool
  block:
    - name: NDFW-4X-000004 - Find DFW rules without logging enabled excluding the default layer 2 rule
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/search?query=(resource_type:Rule%20AND%20logged:false%20AND%20!id:default-layer2-rule%20AND%20parent_path:?infra?domains?default?security-policies*)&included_fields=id,rule_id,logged,path,sequence_number,action"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfwruleswo_logging
      changed_when: false

    - name: NDFW-4X-000004 - Enable logging on DFW rules without logging enabled
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1{{ item.path }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PATCH
        body: "{{ lookup('template', './enable_logging_dfw_rule.json.j2') | to_json }}"
        body_format: json
        status_code: 200
      with_items:
        - "{{ dfwruleswo_logging.json.results }}"
      register: response
      when:
        - dfwruleswo_logging.json.result_count != 0
      changed_when:
        - response.status == 200

###################################################################################################################################
- name: NDFW-4X-000015 - The NSX Distributed Firewall must limit the effects of packet flooding types of denial-of-service (DoS) attacks.
  tags: [NDFW-4X-000015]
  when: run_dfw_flood_protection | bool
  block:
    - name: NDFW-4X-000015 - Check if flood protection profiles exists
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/search?query=(resource_type:(DistributedFloodProtectionProfile))"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfw_floodprot_prof
      changed_when: false

    - name: NDFW-4X-000015 - Create a flood protection profile if doesn't exist
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/flood-protection-profiles/{{ var_dfw_fpp_name }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PATCH
        body: "{{ lookup('template', './dfw_create_flood_prot_prof.json.j2') }}"
        body_format: json
        status_code: 200
      register: response_create
      when:
        - dfw_floodprot_prof.json.result_count == 0
      changed_when:
        - response_create.status == 200

    - name: NDFW-4X-000015 - Update existing flood protection profiles
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/flood-protection-profiles/{{ item.id }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PATCH
        body: "{{ lookup('template', './dfw_upd_flood_prot_prof.json.j2') | to_json }}"
        body_format: json
        status_code: 200
      with_items:
        - "{{ dfw_floodprot_prof.json.results }}"
      register: response_update
      when:
        - dfw_floodprot_prof.json.result_count != 0
        - (item.enable_syncache != var_dfw_fpp_syncache) or
          (item.enable_rst_spoofing != var_dfw_fpp_rst_spoofing) or
          (item.udp_active_flow_limit != var_dfw_fpp_udp_active_flow_limit) or
          (item.icmp_active_flow_limit != var_dfw_fpp_icmp_active_flow_limit) or
          (item.tcp_half_open_conn_limit != var_dfw_fpp_tcp_half_open_conn_limit) or
          (item.other_active_conn_limit != var_dfw_fpp_other_active_conn_limit)
      changed_when:
        - response_update.status == 200

###################################################################################################################################
- name: NDFW-4X-000016 - The NSX Distributed Firewall must deny network communications traffic by default and allow network communications traffic by exception.
  tags: [NDFW-4X-000016]
  when: run_dfw_default_rule_action | bool
  block:
    - name: NDFW-4X-000016 - Find DFW default layer 3 rule
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/domains/default/security-policies/default-layer3-section/rules/default-layer3-rule"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfwrules_layerthree
      changed_when: false

    - name: NDFW-4X-000016 - Update DFW default layer 3 rule action to desired value
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/domains/default/security-policies/default-layer3-section/rules/default-layer3-rule"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PATCH
        body: "{{ lookup('template', './disable_default_layer3_traffic.json.j2') | to_json }}"
        body_format: json
        status_code: 200
      register: response
      when:
        - dfwrules_layerthree.json.action == "ALLOW"
      changed_when:
        - response.status == 200

###################################################################################################################################
- name: NDFW-4X-000027
  tags: [NDFW-4X-000027]
  when: run_dfw_app_based_rules | bool
  block:
    - name: NDFW-4X-000001 - The NSX Distributed Firewall must be configured to inspect traffic at the application layer.
      ansible.builtin.debug:
        msg: "NDFW-4X-000001 - This control must be manually remediated."
      changed_when: false

###################################################################################################################################
- name: NDFW-4X-000029 - The NSX Distributed Firewall must configure SpoofGuard to restrict it from accepting outbound packets that contain an illegitimate address in the source address.
  tags: [NDFW-4X-000029]
  when: run_dfw_spoofguard_profile | bool
  block:
    - name: NDFW-4X-000029 - List SpoofGuard segment profiles excluding the default profile which cannot be modified
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/search?query=(resource_type:SpoofGuardProfile%20AND%20_system_owned:false)"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfw_spfgrd_prof_list
      changed_when: false

    - name: NDFW-4X-000029 - Create SpoofGuard segment profile with port binding enabled if none exist
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/spoofguard-profiles/{{ var_dfw_spoofguard_profile_name }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PUT
        body: "{{ lookup('template', './dfw_spoof_guard_prof_create.json.j2') }}"
        body_format: json
        status_code: 200
      when:
        - dfw_spfgrd_prof_list.json.result_count == 0
      register: dfw_spfgrd_prof_wportbind_create
      changed_when:
        - dfw_spfgrd_prof_wportbind_create.status == 200

    - name: NDFW-4X-000029 - Update SpoofGuard segment profiles with port binding disabled
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/spoofguard-profiles/{{ item.id }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PATCH
        body: "{{ lookup('template', './dfw_spoof_guard_prof_patch.json') }}"
        body_format: json
        status_code: 200
      with_items:
        - "{{ dfw_spfgrd_prof_list.json.results }}"
      when:
        - dfw_spfgrd_prof_list.json.result_count != 0
        - not item.address_binding_allowlist
      register: dfw_spfgrd_prof_wportbind_update
      changed_when:
        - dfw_spfgrd_prof_wportbind_update.status == 200

    - name: NDFW-4X-000029 - Get all the segments
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/segments"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfwsegmentlist
      changed_when: false

    - name: NDFW-4X-000029 - Loop through segments and update Spoofguard profile if necessary
      ansible.builtin.include_tasks:
        file: dfw_segments_update_spoofguard.yml
      with_items: "{{ dfwsegmentlist.json.results }}"
      when:
        - dfwsegmentlist.json.result_count != 0

###################################################################################################################################
- name: NDFW-4X-000034 - The NSX Distributed Firewall must configure an IP Discovery profile to disable trust on every use methods.
  tags: [NDFW-4X-000034]
  when: run_dfw_ip_discovery_profile | bool
  block:
    - name: NDFW-4X-000034 - List IP Discovery segment profiles excluding the default profile which cannot be modified
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/search?query=(resource_type:IPDiscoveryProfile%20AND%20_system_owned:false)"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfw_ipdis_prof_list
      changed_when: false

    - name: NDFW-4X-000034 - Create IP Discovery segment profile if none exist
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/ip-discovery-profiles/{{ var_dfw_ip_discovery_profile_name }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PUT
        body: "{{ lookup('template', './dfw_ip_discovery_prof_create.json.j2') }}"
        body_format: json
        status_code: 200
      when:
        - dfw_ipdis_prof_list.json.result_count == 0
      register: dfw_ip_discovery_profile_create
      changed_when:
        - dfw_ip_discovery_profile_create.status == 200

    - name: NDFW-4X-000034 - Update IP Discovery segment profiles if needed
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/ip-discovery-profiles/{{ item.id }}"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: PATCH
        body: "{{ lookup('template', './dfw_ip_discovery_prof_patch.json.j2') }}"
        body_format: json
        status_code: 200
      with_items:
        - "{{ dfw_ipdis_prof_list.json.results }}"
      when:
        - dfw_ipdis_prof_list.json.result_count != 0
        - (not item.ip_v4_discovery_options.arp_snooping_config.arp_snooping_enabled) or
          (item.ip_v4_discovery_options.arp_snooping_config.arp_binding_limit != 1) or
          (item.ip_v4_discovery_options.dhcp_snooping_enabled) or
          (item.ip_v4_discovery_options.vmtools_enabled) or
          (item.ip_v6_discovery_options.dhcp_snooping_v6_enabled) or
          (item.ip_v6_discovery_options.vmtools_v6_enabled)
      register: dfw_ipdis_prof_update
      changed_when:
        - dfw_ipdis_prof_update.status == 200

    - name: NDFW-4X-000034 - Get all the segments
      ansible.builtin.uri:
        url: "https://{{ var_nsx_manager }}/policy/api/v1/infra/segments"
        validate_certs: false
        headers:
          Cookie: "{{ var_jsession_id }}"
          X-XSRF-TOKEN: "{{ var_session_token }}"
        method: GET
      register: dfwsegmentlist
      changed_when: false

    - name: NDFW-4X-000034 - Loop through segments and update IP Discovery profile if necessary
      ansible.builtin.include_tasks:
        file: dfw_segments_update_ip_discovery.yml
      with_items: "{{ dfwsegmentlist.json.results }}"
      when:
        - dfwsegmentlist.json.result_count != 0
