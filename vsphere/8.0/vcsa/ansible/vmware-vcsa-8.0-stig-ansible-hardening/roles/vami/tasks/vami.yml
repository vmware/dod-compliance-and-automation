---
# Ansible Playbook for vCenter Appliance 8.0 VAMI Service STIG Readiness Guide

# Backup files that may be modified in case restoration is needed
- name: Backup files that may be modified in case restoration is needed
  tags: [always, backup]
  when: run_create_backups | bool
  block:
    - name: Backup files - Create time stamp
      ansible.builtin.set_fact:
        backup_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"

    - name: Backup files - If restoring be sure to restore permissions that original file had!!
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item }}"
        dest: "/tmp/ansible-backups-vcsa-vami-{{ backup_timestamp }}/"
        mode: preserve
      changed_when: false
      register: backupresult
      failed_when:
        - backupresult.msg is defined
        - "'not found' not in backupresult.msg"
      with_items:
        - '{{ var_opt_conf_path }}'
        - '{{ var_etc_conf_path }}'
        - '{{ var_rsyslog_conf_path }}'

    - name: Backup files - If restoring be sure to restore permissions that original file had!! Backup etc lighttpd.conf
      ansible.builtin.copy:
        remote_src: true
        src: "{{ item }}"
        dest: "/tmp/ansible-backups-vcsa-vami-{{ backup_timestamp }}/etc"
        mode: preserve
      changed_when: false
      register: backupresult
      failed_when:
        - backupresult.msg is defined
        - "'not found' not in backupresult.msg"
      with_items:
        - '{{ var_etc_conf_path }}'

###################################################################################################################################
- name: VCLD-80-000001
  tags: [VCLD-80-000001]
  when: run_max_connections | bool
  block:
    - name: VCLD-80-000001 - Update server.max-connections
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^server.max-connections.*$'
        line: 'server.max-connections = 1024'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000004
  tags: [VCLD-80-000004]
  when: run_ssl_engine | bool
  block:
    - name: VCLD-80-000004 - Update ssl.engine
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^ssl.engine.*$'
        line: 'ssl.engine = "enable"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000005
  tags: [VCLD-80-000005]
  when: run_mod_accesslog | bool
  block:
    - name: VCLD-80-000005 - Update mod_accesslog
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^\s?"mod_accesslog",$'
        line: '  "mod_accesslog",'
        state: present
        insertafter: '^server.modules = \($'
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000010
  tags: [VCLD-80-000010]
  when: run_accesslog_format | bool
  block:
    - name: VCLD-80-000010 - Comment out accesslog.format
      ansible.builtin.replace:
        path: '{{ var_opt_conf_path }}'
        regexp: '^(accesslog.format.*)$'
        replace: '# \1'
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000019
  tags: [VCLD-80-000019]
  when: run_log_files_permissions | bool
  block:
    - name: VCLD-80-000019 - Find var logs with incorrect permissions
      ansible.builtin.shell: find {{ var_log_dir }} {{ var_log_dir2 }} -xdev ! -name install.log -type f -a '(' -perm -o+w -o -not -user {{ var_log_owner }} -o -not -group {{ var_log_group }} ')';
      register: files
      changed_when: files.stdout != ""

    - name: VCLD-80-000019 - Update permissions on var log files found to be incorrect
      ansible.builtin.file:
        path: "{{ item }}"
        state: file
        owner: '{{ var_log_owner }}'
        group: '{{ var_log_group }}'
        mode: o-w
      with_items: "{{ files.stdout_lines }}"
      when:
        - files.stdout != ""

    - name: VCLD-80-000019 - Find opt logs with incorrect permissions
      ansible.builtin.shell: find {{ var_log_dir3 }} -xdev ! -name install.log -type f -a '(' -perm -o+w -o -not -user {{ var_log_owner2 }} -o -not -group {{ var_log_group2 }} ')';
      register: files
      changed_when: files.stdout != ""

    - name: VCLD-80-000019 - Update permissions on opt log files found to be incorrect
      ansible.builtin.file:
        path: "{{ item }}"
        state: file
        owner: '{{ var_log_owner2 }}'
        group: '{{ var_log_group2 }}'
        mode: o-w
      with_items: "{{ files.stdout_lines }}"
      when:
        - files.stdout != ""

###################################################################################################################################
- name: VCLD-80-000022
  tags: [VCLD-80-000022]
  when: run_rsyslog_conf | bool
  block:
    - name: VCLD-80-000022 - Configure rsyslog conf
      ansible.builtin.template:
        src: '{{ var_rsyslog_conf_name }}'
        dest: '/etc/vmware-syslog/{{ var_rsyslog_conf_name }}'
        owner: root
        group: root
        mode: '0644'
        force: true
      notify:
        - '{{ role_name }} : restart rsyslog'

###################################################################################################################################
- name: VCLD-80-000031
  tags: [VCLD-80-000031]
  when: run_mimetype_use_xattr | bool
  block:
    - name: VCLD-80-000031 - Update mimetype.use-xattr
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^mimetype.use-xattr.*$'
        line: 'mimetype.use-xattr = "disable"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000033
  tags: [VCLD-80-000033]
  when: run_url_access_deny | bool
  block:
    - name: VCLD-80-000033 - Update opt url.access-deny
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^url.access-deny.*$'
        line: 'url.access-deny = ( "~", ".inc" )'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000034
  tags: [VCLD-80-000034]
  when: run_mod_webdav | bool
  block:
    - name: VCLD-80-000033 - Remove mod_webdav
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        state: absent
        regexp: '^/s?mod_webdav.*$'
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000035
  tags: [VCLD-80-000035]
  when: run_max_keep_alive | bool
  block:
    - name: VCLD-80-000035 - Update server.max-keep-alive-idle
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^server.max-keep-alive-idle.*$'
        line: 'server.max-keep-alive-idle = 30'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000040
  tags: [VCLD-80-000040]
  when: run_ssl_key_permissions | bool
  block:
    - name: VCLD-80-000040 - Update permissions on SSL key file
      ansible.builtin.file:
        path: '{{ var_ssl_key_path }}'
        state: file
        owner: 'root'
        group: 'root'
        mode: '0600'

###################################################################################################################################
- name: VCLD-80-000042
  tags: [VCLD-80-000042]
  when: run_server_fips_mode | bool
  block:
    - name: VCLD-80-000042 - Update server.fips-mode
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^server.fips-mode.*$'
        line: 'server.fips-mode = "enable"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000060
  tags: [VCLD-80-000060]
  when: run_server_max_fds | bool
  block:
    - name: VCLD-80-000060 - Update server.max-fds
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^server.max-fds.*$'
        line: 'server.max-fds = 2048'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000061
  tags: [VCLD-80-000061]
  when: run_text_mime_utf8 | bool
  block:
    - name: VCLD-80-000061 - Find text mime types without charset
      ansible.builtin.shell: >
                          set -o pipefail && \
                          grep 'text/' '{{ var_opt_conf_path }}' | grep -v 'charset=utf-8'
      register: mimetypes
      changed_when: false
      failed_when: "mimetypes.rc == 2"

    - name: VCLD-80-000061 - VAMI must set the enconding for all text mime types to UTF-8. Parse results
      ansible.builtin.set_fact:
        mimetypes: "{{ mimetypes.stdout_lines }}"
      when:
        - mimetypes | length | int > 0

    - name: VCLD-80-000061 - VAMI must set the enconding for all text mime types to UTF-8.
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        state: present
        regexp: "{{ item }}"
        line: "{{ item | regex_replace('\",$', '') }}; charset=utf-8\","
      with_items:
        - "{{ mimetypes }}"
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'
      when:
        - mimetypes | length | int > 0

###################################################################################################################################
- name: VCLD-80-000062
  tags: [VCLD-80-000062]
  when: run_dir_listing | bool
  block:
    - name: VCLD-80-000062 - Update dir-listing.activate
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^dir-listing.activate.*$'
        line: 'dir-listing.activate = "disable"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000063
  tags: [VCLD-80-000063]
  when: run_mod_status | bool
  block:
    - name: VCLD-80-000063 - Remove mod_status
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        state: absent
        regexp: '^/s?mod_status.*$'
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000064
  tags: [VCLD-80-000064]
  when: run_debug_log_request | bool
  block:
    - name: VCLD-80-000064 - Update debug.log-request-handling
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^debug.log-request-handling.*$'
        line: 'debug.log-request-handling = "disable"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000096
  tags: [VCLD-80-000096]
  when: run_honor_ssl_cipher_order | bool
  block:
    - name: VCLD-80-000096 - Update ssl.honor-cipher-order
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^ssl.honor-cipher-order.*$'
        line: 'ssl.honor-cipher-order = "enable"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000097
  tags: [VCLD-80-000097]
  when: run_ssl_disable_client_reneg | bool
  block:
    - name: VCLD-80-000097 - Remove ssl.disable-client-renegotiation
      ansible.builtin.lineinfile:
        path: '{{ var_opt_conf_path }}'
        regexp: '^ssl.disable-client-renegotiation.*$'
        state: absent
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
- name: VCLD-80-000098
  tags: [VCLD-80-000098]
  when: run_server_tag | bool
  block:
    - name: VCLD-80-000098 - Update server.tag
      ansible.builtin.lineinfile:
        path: '{{ var_etc_conf_path }}'
        regexp: '^server.tag.*$'
        line: 'server.tag = "vami"'
        state: present
        firstmatch: true
      notify:
        - '{{ role_name }} : restart {{ var_notify_service_name }}'

###################################################################################################################################
# VCLD-80-000099-102 Manual remediation
